<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>五种状态码</title>
      <link href="/2021/07/25/wu-chong-zhuang-tai-ma/"/>
      <url>/2021/07/25/wu-chong-zhuang-tai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><h3 id="一、100-状态码"><a href="#一、100-状态码" class="headerlink" title="一、100 状态码"></a>一、100 状态码</h3><p>101 - 网页本身的错误<br>104 - 未知错误 - 应该是这种吧!curl:OpenSSL SSL_read: 连接被对方重设, errno 104 应该可以理解成链接过期了吧! 为了防止DDoS攻击,很多下载链接都带有时效了!变成临时链接</p><h3 id="二、200-状态码：成功-2××：成功处理了请求的状态码"><a href="#二、200-状态码：成功-2××：成功处理了请求的状态码" class="headerlink" title="二、200 状态码：成功 2××：成功处理了请求的状态码"></a>二、200 状态码：成功 2××：成功处理了请求的状态码</h3><p>200 - 服务器成功返回网页<br>204 - 服务器成功处理了请求，但没有返回任何内容</p><h3 id="三、300-状态码：重定向3××：每次请求中使用重定向不要超过-5-次"><a href="#三、300-状态码：重定向3××：每次请求中使用重定向不要超过-5-次" class="headerlink" title="三、300 状态码：重定向3××：每次请求中使用重定向不要超过 5 次"></a>三、300 状态码：重定向3××：每次请求中使用重定向不要超过 5 次</h3><p>301 - 请求的网页已永久移动到新位置。当URLs发生变化时，使用301代码。搜索引擎索引中保存新的URL<br>302 - 请求的网页临时移动到新位置。搜索引擎索引中保存原来的URL<br>304 - 客户端已经执行了GET，但文件变化 - 如果网页自请求者上次请求后没有更新，则用304代码告诉搜索引擎机器人，可节省带宽和开销</p><h3 id="四、400-状态码：客户端错误4××-：表示请求可能出错，妨碍了服务器的处理"><a href="#四、400-状态码：客户端错误4××-：表示请求可能出错，妨碍了服务器的处理" class="headerlink" title="四、400 状态码：客户端错误4×× ：表示请求可能出错，妨碍了服务器的处理"></a>四、400 状态码：客户端错误4×× ：表示请求可能出错，妨碍了服务器的处理</h3><p>400 - 服务器不理解请求的语法<br>403 - 服务器拒绝请求<br>404 - 请求的网页不存在 - 服务器找不到请求的网页。服务器上不存在的网页经常会返回此代码<br>410 - 请求的资源永久删除后，服务器返回此响应。该代码与404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时用来替代404 页面代码。如果资源已永久删除，应当使用 301 指定资源的新位置</p><h3 id="五、500-状态码：服务器错误5××-：表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。"><a href="#五、500-状态码：服务器错误5××-：表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。" class="headerlink" title="五、500 状态码：服务器错误5×× ：表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。"></a>五、500 状态码：服务器错误5×× ：表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</h3><p>500 - 服务器遇到错误，无法完成请求<br>502 - 错误网关；无效网关；在互联网中表示一种网络错误。表现在WEB浏览器中给出的页面反馈<br>503 - 服务器超时 - 服务器目前无法使用（由于超载或停机维护）</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github</title>
      <link href="/2021/07/25/github/"/>
      <url>/2021/07/25/github/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2021/07/25/git/"/>
      <url>/2021/07/25/git/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ytljava</title>
      <link href="/2021/07/25/ytljava/"/>
      <url>/2021/07/25/ytljava/</url>
      
        <content type="html"><![CDATA[<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="—JAVA格式—"><a href="#—JAVA格式—" class="headerlink" title="—JAVA格式—"></a>—JAVA格式—</h3><p>public class HelloWorld {<br>    public static void main(String[] args){<br>        System.out.println(“HelloWorld”);<br>    }<br>}</p><h3 id="IDEA安装地址："><a href="#IDEA安装地址：" class="headerlink" title="IDEA安装地址："></a>IDEA安装地址：</h3><p><a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></p><h3 id="IDEA项目结构："><a href="#IDEA项目结构：" class="headerlink" title="IDEA项目结构："></a>IDEA项目结构：</h3><p>1 创建一个空项目(javaSE_Code)<br>2 创建一个新模块(ide_test)<br>3 在idea_test模块下的src下创建一个包(com.itheima)<br>4 在com.itheima包下新建一个类(HelloWorld)<br>5 在HelloWorld类中编写代码<br>6 在idea中执行程序</p><h3 id="IDEA中内容辅助键和快捷键"><a href="#IDEA中内容辅助键和快捷键" class="headerlink" title="IDEA中内容辅助键和快捷键"></a>IDEA中内容辅助键和快捷键</h3><p>1 快速生成语句<br>    psvm：快速生成main(方法)<br>    sout：快速生成输出语句<br>2 内容辅助快捷键<br>    Ctrl+Alt+space: 内容提示，代码补全<br>3 快捷键<br>    注释：<br>        Ctrl+/: 选中代码单行注释<br>        Ctrl+Shift+/：选中多行代码注释</p><h3 id="IDEA中模块操作分类"><a href="#IDEA中模块操作分类" class="headerlink" title="IDEA中模块操作分类"></a>IDEA中模块操作分类</h3><p>1 新建模块<br>    “File”<del>“Project Structure”</del>“Modules”<del>“+”</del>“New Module”<del>“java”</del>“JDK自己选”<del>“Next”</del>“修改模块名”<del>“Finish”</del>“OK”<br>2 删除模块<br>    “选中要删除的模块右键”<del>“Remove Module”</del>“Remove” 注意这里只是移除，模块文件是还在的，要想彻底清除，就要找到路径下删除。<br>3 快捷打开模块目录路径<br>    “随便选中一个模块右键”<del>“Open in”</del>“Explorer”<br>4 导入模块<br>    “File”<del>“Project Structure”</del>“Modules”<del>“+”</del>“Import Module”<del>“选择你要导入的模块”</del>“OK”<del>“Next”</del>“Next”<del>“Next”</del>“Finish”~”OK”</p><h3 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h3><h4 id="一-注释"><a href="#一-注释" class="headerlink" title="一.注释"></a>一.注释</h4><p>1.单行注释：//注释信息<br>2.多行注释：/<em>注释信息</em>/<br>3.文档注释：/*<em>注释信息</em>/</p><h4 id="二-关键字"><a href="#二-关键字" class="headerlink" title="二.关键字"></a>二.关键字</h4><p>1.关键字的字母全部小写<br>2.常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观</p><h4 id="三-常量"><a href="#三-常量" class="headerlink" title="三.常量"></a>三.常量</h4><p>常量定义：在程序运行过程中，其值不可以发生改变的量<br>常量分类：<br>    1.字符串常量 说明(用双引号括起来的内容) 举例(“HelloWorld”,”黑马程序员”)<br>    2.整数常量   说明(不带小数的数字)       举例(666,-88)<br>    3.小数常量   说明(带小数的数字)         举例(13.14,-5.21)<br>    4.字符常量   说明(用单引号括起来的内容) 举例(‘A’,’0’,’我’)<br>    5.布尔常量   说明(布尔值，表示真假)     举例(只有两个值：true,false)<br>    6.空常量     说明(一个特殊的值，空值)   举例(值是：null)</p><h4 id="四-数据类型"><a href="#四-数据类型" class="headerlink" title="四.数据类型"></a>四.数据类型</h4><p>1.计算机存储单元，计算机存储设备的最小信息单元叫”位(bit)”，称之为”比特位”，通常用小写字母”b”表示<br>                计算机中最小的存储存储单元叫”字节(byte)”,用大写字母”B”表示，字节是由连续的8个位组成<br>    除了字节外还有一些常用的存储单位<br>    1B(字节) = 8bit<br>    1KB = 1024B<br>    1MB = 1024KB<br>    1GB = 1024MB<br>    1TB = 1024GB<br>2.数据类型内存占用和取值范围<br>    (1)整数4个关键字分别为<br>        byte    内存(1) 取值范围(-128<del>127)<br>        short   内存(2) 取值范围(-32768</del>32767)<br>        int     内存(4) 取值范围(-2的31次方到2的31次方-1)<br>        long    内存(8) 取值范围(-2的63次方到2的63次方-1)<br>    (2)浮点数2个关键字<br>        float   内存(4) 取值范围(负数：-3.402823E+38到-1.401298E-45 正数：1.101298E-45到3.402828E+38)<br>        double  内存(8) 取值范围(负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324到1.797693E+308)<br>    (3)字符1个关键字<br>        char    内存(2) 取值范围(0-65535)<br>    (4)布尔1个关键字<br>        boolean 内存(1) 取值范围(true,false)<br>    (说明：E+38表示是乘以10的38次方，同样，E-45表示乘以10的负45次方)<br>    (细节：如果给一个整数默认的是int类型的，给一个浮点数默认的是double类型的)</p><h4 id="五-变量"><a href="#五-变量" class="headerlink" title="五.变量"></a>五.变量</h4><p>变量定义：<br>    格式：数据类型变量名 = 变量值;<br>    范例：int a = 10;<br>变量的使用：<br>    取值格式：变量名<br>    范例：a<br>    修改值格式：变量名 = 变量值;<br>    范例：a = 20;<br>注意事项：<br>    (1)变量名不能重复<br>        范例：<br>            int a = 10;<br>            int a = 20;<br>    (2)变量未赋值，不能使用<br>        范例：<br>            int a;<br>    (3)long类型的变量定义时，为了防止整数过大，后面需要L/l<br>        范例：<br>            long b = 10000000000l;<br>            System.out.println(b);<br>    (4)float类型的变量定义的时候，为了防止类型不兼容，后面需要加F/f<br>        范例：<br>            float c = 13.14F;<br>            System.out.println(c);</p><h4 id="六-标识符"><a href="#六-标识符" class="headerlink" title="六.标识符"></a>六.标识符</h4><p>标识符概述：就是给类，方法，变量等起名的符号<br>1.标识符定义规则<br>    (1)由数字、字母、下划线(_)、和美元符($)组成<br>    (2)不能以数字开头<br>    (3)不能是关键字<br>    (4)区分大小写<br>    判断：<br>        bj(符合)    b2(符合)    2b(不符合)<br>        class(不符合) _2b(符合)   #itheima(不符合)<br>        ak47(符合)  Class(符合) helloworld(符合)<br>        aaaaaa(符合但不规范不利于名字区分)<br>        aaaaaaa(符合但不规范不利于名字区分)<br>2.常见命名约定<br>    (1)小驼峰命名法：方法、变量<br>        * 约定1：标识符是一个单词的时候，首字母小写<br>        * 范例1：name<br>        * 约定2：标识符由多个字母单词组成的时候，第一个单词首字母小写，其他单词首字母大写<br>        * 范例1：firstName<br>    (2)大驼峰命名法：类<br>        * 约定1：标识符是一个单词的时候，首字大母<br>        * 范例1：Student<br>        * 约定2：标识符由多个字母单词组成的时候，每个单词的首字母大写<br>        * 范例2：GoodStudent</p><h4 id="七-类型转换"><a href="#七-类型转换" class="headerlink" title="七.类型转换"></a>七.类型转换</h4><p>1.自动类型转换：把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量<br>    范例1：double d = 10;<br>    数据范围从小到大：<br>        byte &lt; short &lt; int &lt; long &lt; float &lt; double<br>                char &lt; int &lt; long &lt; float &lt; double<br>2.强制类型转换：把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量<br>    * 格式：目标数据类型 变量名 = (目标数据类型)值或者变量<br>    * 范例1：int k = (int)88.88;</p><h4 id="八-算术运算符"><a href="#八-算术运算符" class="headerlink" title="八.算术运算符"></a>八.算术运算符</h4><p>1.运算符和表达式<br>    * 运算符：对常量或者变量进行操作的符号<br>    * 表达式：用运算符把常量或者变量连接起来符号java语法的式子就可以称为表达式<br>              不同运算符连接起来的表达式体现的是不同类型的表达式<br>    * 举例说明：<br>                int a = 10;<br>                int b = 20;<br>                int c = a + b;<br>                +；是运算符，并且是算术运算符<br>                a+b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式<br>2.算术运算符<br>    符号    作用    说明<br>    +       加<br>    -        减<br>    *        乘<br>    /        除<br>    %        取余    获取两个数据做除法的余数<br>    注意事项：<br>        /和%的区别：两个数据做除法，/取结果的商，%取结果的余数<br>        整数操作只能的到整数，要想得到小数，必须有浮点数参与运算<br>3.字符+的操作<br>    拿字符在计算机底层对应的数值来进行计算的<br>        ‘A’ == 65  A-Z是连续的<br>        ‘a’ == 97  a-z是连续的<br>        ‘0’ == 48  0-9是连续的<br>    算术表达式中包含多个基本数据类型的值的时候。整个算术表达式的类型会自动进行提升<br>    提升规则：<br>        * byte类型，short类型和char类型将被提升到int类型<br>        * 整个表达式的类型自动提升到表达式中最高等级操作同样的类型<br>            等级顺序：byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ytlpython</title>
      <link href="/2021/07/25/ytlpython/"/>
      <url>/2021/07/25/ytlpython/</url>
      
        <content type="html"><![CDATA[<h2 id="uiautomator2工具做app自动化"><a href="#uiautomator2工具做app自动化" class="headerlink" title="uiautomator2工具做app自动化"></a>uiautomator2工具做app自动化</h2><h1 id="uiautomator2使用教程-https-www-jb51-net-article-205942-htm"><a href="#uiautomator2使用教程-https-www-jb51-net-article-205942-htm" class="headerlink" title="uiautomator2使用教程(https://www.jb51.net/article/205942.htm)"></a><a href="https://www.cnblogs.com/Appleli/p/11413229.html">uiautomator2使用教程</a>(<a href="https://www.jb51.net/article/205942.htm">https://www.jb51.net/article/205942.htm</a>)</h1><p>文章参考：<a href="https://vic.kim/2019/05/20/UIAutomator2%E7%9A%84%E4%BD%BF%E7%94%A8/">https://vic.kim/2019/05/20/UIAutomator2%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p><p>一、要求</p><p>python 3.6+</p><p>android 4.4+</p><p>二、介绍</p><p>uiautomator2 是一个可以使用Python对Android设备进行UI自动化的库。其底层基于Google uiautomator，Google提供的uiautomator库可以获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作。</p><p>三、地址</p><p>GitHub地址：<a href="https://github.com/openatx/uiautomator2">https://github.com/openatx/uiautomator2</a></p><p>or <a href="https://github.com/openatx/uiautomator2/blob/master/README.md">https://github.com/openatx/uiautomator2/blob/master/README.md</a></p><p>四、安装</p><p><strong>1、安装uiautomator2</strong></p><p>pip install –pre uiautomator2</p><p>pip install pillow</p><p><strong>2、初始化</strong></p><p>部署相关的守护进程。</p><p>电脑连接上一个手机或多个手机, 确保adb已经添加到环境变量中，执行下面的命令会自动安装本库所需要的设备端程序：uiautomator-server 、atx-agent、openstf/minicap、openstf/minitouch</p><p>python -m uiautomator2 init</p><p>安装完成，设备上会多一个uiautomator的应用。</p><p>配置手机设备参数：</p><p>有两种方法，一种是通过WIFI，另一种是通过USB数据线将手机链接电脑。</p><p>WiFi连接更方便一点，需要保持PC和手机使用的一个WIFI，查看手机连接WIFI的IP地址。</p><p><strong>3、测试</strong></p><p>import uiautomator2 as u2</p><p>d = u2.connect(‘127.0.0.1::6555’)</p><p>print(d.info) </p><p>打印结果：</p><p>{‘currentPackageName’: ‘com.android.launcher’, ‘displayHeight’: 1280, ‘displayRotation’: 1, ‘displaySizeDpX’: 360, ‘displaySizeDpY’: 640, ‘displayWidth’: 720, ‘productName’: ‘DUK-AL20’, ‘screenOn’: True, ‘sdkInt’: 23, ‘naturalOrientation’: False}</p><p>五、元素定位</p><h2 id="1、查看app控件"><a href="#1、查看app控件" class="headerlink" title="1、查看app控件"></a><strong>1、查看app控件</strong></h2><p>（1）、安装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install --pre --upgrade weditor</span><br><span class="line">（2）、使用</span><br><span class="line">python -m weditor</span><br><span class="line">（3）、工具打开 </span><br><span class="line">默认会通过浏览器打开页面：http://atx.open.netease.com/</span><br><span class="line">（4）工具的操作步骤</span><br><span class="line">选择android、输入手机或者模拟器的ip+端口，点击connect</span><br><span class="line">dump hierarchy是用来刷新页面的</span><br><span class="line">鼠标点击想要的元素，就可以查看他们的控件了</span><br></pre></td></tr></tbody></table></figure><h2 id="2、主要语法"><a href="#2、主要语法" class="headerlink" title="2、主要语法"></a><strong>2、主要语法</strong></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">（<span class="number">1</span>）启动app</span><br><span class="line">d.app_start(<span class="string">"com.addcn.android.house591"</span>)</span><br><span class="line">（<span class="number">2</span>）关闭app</span><br><span class="line">cls.d.app_stop(<span class="string">"com.addcn.android.house591"</span>)</span><br><span class="line">（<span class="number">3</span>）ResourceId定位</span><br><span class="line">cls.d(resourceId=<span class="string">"com.addcn.android.house591:id/ad_banner"</span>).click()</span><br><span class="line">（<span class="number">4</span>）Text定位</span><br><span class="line">d(text=<span class="string">"精选"</span>).click()</span><br><span class="line">（<span class="number">5</span>）Description定位</span><br><span class="line">d(description=<span class="string">".."</span>).click()</span><br><span class="line">（<span class="number">6</span>）ClassName定位</span><br><span class="line">d(className=<span class="string">"android.widget.TextView"</span>).click()</span><br><span class="line">（<span class="number">7</span>）xpath定位</span><br><span class="line">d.xpath(<span class="string">"//*[@content-desc='分享']"</span>).click()</span><br></pre></td></tr></tbody></table></figure><h2 id="3、其他操作"><a href="#3、其他操作" class="headerlink" title="3、其他操作"></a>3、其他操作</h2><p>（1）#组默认元素等待超时（秒）<br>d.wait_timeout = 20.0  #默认20<br>（2）元素拖拽<br>（3）开关点击</p><ul><li><p><code>d(A).left(B), selects B on the left side of A.</code></p></li><li><p><code>d(A).right(B), selects B on the right side of A.</code></p></li><li><p><code>d(A).up(B), selects B above A.</code></p></li><li><p><code>d(A).down(B), selects B under A.</code></p></li><li><p>```<br>  例如：<br>  #选择“Wi-Fi”右侧的“开关”<br>  d(text=”Wi‑Fi”).right(className=”android.widget.Switch”).click()</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>（4）获取/统计某个相同条件的数目<br>d(text=”Add new”).count<br>或者<br>len(d(text=”Add new”))<br>得知数目之后，我们可以通过索引去定位<br>d(text=”Add new”)[0]<br>d(text=”Add new”)<br>也可以遍历<br>for view in d(text=”Add new”):<br>  view.info </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>（5）截图<br>＃截取屏幕截图并保存到计算机上的文件中，要求Android&gt; = 4.2。<br>d.screenshot（ “ home.jpg ”） # get PIL.Image格式化图像。当然，你需要首先安装pillow  image = d.screenshot（） # default format =“pillow”<br>image.save（ “ home.jpg ”）＃或home.png。目前，只有PNG和JPG支持＃得到OpenCV的格式图像。当然，你需要先安装numpy和cv2<br>import cv2<br>image = d.screenshot（ format = ‘ opencv’） cv2.imwrite（ ‘ home.jpg ‘图像）＃获取原始JPEG数据 imagebin = d.screenshot（格式= ‘原始’） 打开（ “ some.jpg ”， “ WB ”）.WRITE（imagebin）（6）手势操作<br>1、单击<br>d（ text = “ Settings ”）.click()<br>2、长按<br>d（ text = “ Settings ”）.long_click（）<br>3、将对象拖向另一个点或另一个UI对象<br>＃笔记：拖不能用于为Android &lt;4.3。<br>＃将UI对象拖动到屏幕点（x，y），0.5秒后<br>d（ text = “设置”）.drag_to（x，y， duration = 0.5）<br>＃将UI对象拖动到另一个（中心位置） UI对象，在0.25秒<br>d（ text = “设置”）.drag_to（ text = “ Clock ”， duration = 0.25）4、在屏幕上滑动</p><h1 id="swipe-from-sx-sy-to-ex-ey"><a href="#swipe-from-sx-sy-to-ex-ey" class="headerlink" title="swipe from (sx, sy) to (ex, ey)"></a>swipe from (sx, sy) to (ex, ey)</h1><p>d.swipe(sx, sy, ex, ey)</p><h1 id="swipe-from-sx-sy-to-ex-ey-with-10-steps"><a href="#swipe-from-sx-sy-to-ex-ey-with-10-steps" class="headerlink" title="swipe from (sx, sy) to (ex, ey) with 10 steps"></a>swipe from (sx, sy) to (ex, ey) with 10 steps</h1><p>d.swipe(sx, sy, ex, ey, steps=10)<br>5、在屏幕上拖拽</p><h1 id="drag-from-sx-sy-to-ex-ey"><a href="#drag-from-sx-sy-to-ex-ey" class="headerlink" title="drag from (sx, sy) to (ex, ey)"></a>drag from (sx, sy) to (ex, ey)</h1><p>d.drag(sx, sy, ex, ey)</p><h1 id="drag-from-sx-sy-to-ex-ey-with-10-steps"><a href="#drag-from-sx-sy-to-ex-ey-with-10-steps" class="headerlink" title="drag from (sx, sy) to (ex, ey) with 10 steps"></a>drag from (sx, sy) to (ex, ey) with 10 steps</h1><p>d.drag(sx, sy, ex, ey, steps=10)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（7）获取对象信息和状态</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>1、d(text=”Settings”).exists<br>＃如果存在则为True，否则为假<br>or d.exists(text=”Settings”) # 进一步使用 d(text=”Settings”).exists(timeout=3)<br># 等待设置出现在3S，相同.wait（3）<br>2、检索特定UI对象的信息<br>d(text=”Settings”).info<br>3、获取/设置/清除可编辑字段的文本（例如，EditText小部件）<br>d(text = “ Settings ”).get_text（）   # get widget text<br>d(text = “ Settings ”).set_text（“ My text … ”）   ＃设置文本<br>d(text = “ Settings ”).clear_text（ ）   ＃清除文字</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（8）系统常用按键</span><br><span class="line"></span><br><span class="line"># press home key</span><br><span class="line">d.press.home()</span><br><span class="line"></span><br><span class="line"># press back key</span><br><span class="line">d.press.back()</span><br><span class="line"></span><br><span class="line"># the normal way to press back key</span><br><span class="line">d.press("back")----亲测可用</span><br><span class="line"></span><br><span class="line"># press keycode 0x07('0') with META ALT(0x02) on</span><br><span class="line">d.press(0x07, 0x02)</span><br><span class="line">- `home          #手机Home键`</span><br><span class="line">- `back          #手机返回键`</span><br><span class="line">- `left          #对应键盘上的向右键&lt;-`</span><br><span class="line">- `right          #对应键盘上的向右键-&gt;`</span><br><span class="line">- `up           #对应键盘上的向上键`</span><br><span class="line">- `down          #对应键盘上的向下键`</span><br><span class="line">- `center          #选中？`</span><br><span class="line">- `menu          #菜单`</span><br><span class="line">- `search          #查找？`</span><br><span class="line">- `enter          #对应键盘上的Enter键`</span><br><span class="line">- `delete`(or `del`)              #对应键盘上的DEL键 用于删除</span><br><span class="line">- `recent`(recent apps)          #任务切换</span><br><span class="line">- `volume_up         #声音向上调整`</span><br><span class="line">- `volume_down        #声音向下调整`</span><br><span class="line">- `volume_mute        #静音按键`</span><br><span class="line">- `camera          #拍照`</span><br><span class="line">- `power          #电源键`</span><br><span class="line"></span><br><span class="line">六、断言</span><br><span class="line">try:</span><br><span class="line">d(判断条件).click()</span><br><span class="line">print("测试成功")</span><br><span class="line">except：</span><br><span class="line">print("测试失败")</span><br><span class="line"></span><br><span class="line">六、使用经验</span><br><span class="line">1、使用前初始化</span><br><span class="line">python -m uiautomator2 init</span><br><span class="line">2、打开工具</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">python -m weditor</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="4、app操作"><a href="#4、app操作" class="headerlink" title="4、app操作"></a>4、app操作</h2><h4 id="添加提示"><a href="#添加提示" class="headerlink" title="添加提示"></a>添加提示</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.toast.show(<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="安装app"><a href="#安装app" class="headerlink" title="安装app"></a>安装app</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"地址"</span></span><br><span class="line">d.app_install(url)</span><br></pre></td></tr></tbody></table></figure><h4 id="打开app"><a href="#打开app" class="headerlink" title="打开app"></a>打开app</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d.app_current())  <span class="comment">#获取当前正在运行的app</span></span><br></pre></td></tr></tbody></table></figure><h4 id="卸载app"><a href="#卸载app" class="headerlink" title="卸载app"></a>卸载app</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.app_uninstall(包名)</span><br></pre></td></tr></tbody></table></figure><h4 id="等待程序运行"><a href="#等待程序运行" class="headerlink" title="等待程序运行"></a>等待程序运行</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法一：pid = d.app_wait(<span class="string">'#包名'</span>)   <span class="comment">#等待应用运行</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> pid:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'#包名'</span>+<span class="string">'没有运行'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'#包名pid是 %d'</span> % pid)</span><br><span class="line">方法二：d.app_wait(<span class="string">'#包名'</span>,front = <span class="literal">True</span>)  <span class="comment">#等待应用前台运行</span></span><br><span class="line">方法三：d.app_wait(<span class="string">'#包名'</span>,timeout = <span class="number">20.0</span>) <span class="comment">#最长等待时间20s</span></span><br></pre></td></tr></tbody></table></figure><h4 id="检查并维持设备端守护进程处于运行状态"><a href="#检查并维持设备端守护进程处于运行状态" class="headerlink" title="检查并维持设备端守护进程处于运行状态"></a>检查并维持设备端守护进程处于运行状态</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.healthcheck()</span><br></pre></td></tr></tbody></table></figure><h4 id="检测应用程序崩溃"><a href="#检测应用程序崩溃" class="headerlink" title="检测应用程序崩溃"></a>检测应用程序崩溃</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sess = d.session(<span class="string">'#包名'</span>)  <span class="comment">#启动某app</span></span><br><span class="line">sess.close() <span class="comment">#停止某app</span></span><br><span class="line">sess.restart() <span class="comment">#冷启动某app</span></span><br></pre></td></tr></tbody></table></figure><h4 id="app启动"><a href="#app启动" class="headerlink" title="app启动"></a>app启动</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.app_start(<span class="string">'#包名'</span>)</span><br><span class="line">d.app_start(<span class="string">'包名'</span>,<span class="string">'活动名'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="关闭app"><a href="#关闭app" class="headerlink" title="关闭app"></a>关闭app</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.app_stop(<span class="string">'#包名'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="清除app数据"><a href="#清除app数据" class="headerlink" title="清除app数据"></a>清除app数据</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.app_clear(<span class="string">'#包名'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.screenshot(<span class="string">r'd:\xxx.png'</span>)  <span class="comment">#在D盘目录下创建一个xxx.png的截图</span></span><br></pre></td></tr></tbody></table></figure><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.implicitly_wait(<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="5、按键操作"><a href="#5、按键操作" class="headerlink" title="5、按键操作"></a>5、按键操作</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d.screen_on()  <span class="comment">#屏幕点亮</span></span><br><span class="line">d.unlock()   <span class="comment">#解锁屏幕</span></span><br><span class="line">d.screen_off()  <span class="comment">#熄屏</span></span><br><span class="line">d.press(<span class="string">"home"</span>)  <span class="comment">#回到主界面</span></span><br><span class="line">d.press(<span class="string">"back"</span>) <span class="comment">#返回</span></span><br><span class="line">d.press(<span class="string">"left"</span>)  <span class="comment">#左滑屏</span></span><br><span class="line">d.press(<span class="string">"right"</span>)  <span class="comment">#右滑屏</span></span><br><span class="line">d.press(<span class="string">"up"</span>)<span class="comment">#上滑屏</span></span><br><span class="line">d.press(<span class="string">"down"</span>)  <span class="comment">#下滑屏</span></span><br><span class="line">d.press(<span class="string">"search"</span>) <span class="comment">#负一屏搜索</span></span><br><span class="line">d.press(<span class="string">"enter"</span>)  <span class="comment">#回车键</span></span><br><span class="line">d.press(<span class="string">"delete"</span>) <span class="comment">#清除app</span></span><br><span class="line">d.press(<span class="string">"power"</span>)  <span class="comment">#电源键</span></span><br><span class="line">d.info.get(<span class="string">'screenOn'</span>) <span class="comment">#获取当前屏幕状态</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6、元素定位"><a href="#6、元素定位" class="headerlink" title="6、元素定位"></a>6、元素定位</h3><h5 id="python-m-weditor"><a href="#python-m-weditor" class="headerlink" title="python -m weditor"></a>python -m weditor</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text  <span class="comment">#根据text文本进入  d(text = '柠檬班').click()</span></span><br><span class="line">textContains  <span class="comment">#包含text文本(模糊定位)  d(textContains = '柠檬班').click()</span></span><br><span class="line">className，classNameMatches</span><br><span class="line">description,</span><br><span class="line">descriptionContains,</span><br><span class="line">descriptionMatches,</span><br><span class="line">descriptionStartsWith</span><br><span class="line">checkable,checked,clickable,longClickable</span><br><span class="line">scrollable,enabled,focusable,focused,selected</span><br><span class="line">packageName,packageNameMatches</span><br><span class="line">resourceId,resourceIdMatches</span><br><span class="line">index,instance</span><br></pre></td></tr></tbody></table></figure><h3 id="7、页面相对位置元素定位"><a href="#7、页面相对位置元素定位" class="headerlink" title="7、页面相对位置元素定位"></a>7、页面相对位置元素定位</h3><p>left，左边的元素</p><p>right，右边的元素</p><p>up，上面的元素</p><p>down，下面的元素</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my = d(resourceId = <span class="string">'#某个元素'</span>)</span><br><span class="line">my.left().click()   <span class="comment">#点击某个元素左边的那个元素</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8、app操作"><a href="#8、app操作" class="headerlink" title="8、app操作"></a>8、app操作</h3><p>百分比定位</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.click(<span class="comment">#百分比)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9、滑动操作"><a href="#9、滑动操作" class="headerlink" title="9、滑动操作"></a>9、滑动操作</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原始版</span></span><br><span class="line">d.swipe(<span class="comment">#startx, starty, endx, endy)</span></span><br><span class="line">d.swipe(<span class="comment">#startx, starty, endx, endy，0.5)  #滑动0.5s</span></span><br><span class="line"><span class="comment">#扩展板</span></span><br><span class="line">d.swipe_ext(<span class="string">'left'</span>) <span class="comment">#手指左滑，4选1  ：left,right,up,down</span></span><br><span class="line">d.swipe_ext(<span class="string">'left'</span>,scale=<span class="number">0.9</span>) <span class="comment">#默认0.9，滑动距离为屏幕宽度的90%</span></span><br><span class="line">d.swipe_ext(<span class="string">'left'</span>box = (<span class="number">0</span> , <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)) <span class="comment">#在（0， 0） _&gt; (100， 100)这个区域滑动</span></span><br><span class="line"><span class="comment">#先定位元素，再使用元素对象滑动</span></span><br><span class="line">e = d(text=<span class="string">'某一元素'</span>)</span><br><span class="line">e.swipe(<span class="string">'down'</span>,steps=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#滑动点击</span></span><br><span class="line">d.swipe_points([(x0, y0),(x1,y1),(x3,y3)],<span class="number">0.2</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="10、拖拽"><a href="#10、拖拽" class="headerlink" title="10、拖拽"></a>10、拖拽</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.drag(sx, sy, ex ,ey)  <span class="comment">#从某坐标拖到某坐标</span></span><br><span class="line">d.drag(sx, sy, ex ,ey， <span class="number">0.5</span>)  <span class="comment">#从某坐标拖到某坐标 滑动0.5s</span></span><br></pre></td></tr></tbody></table></figure><h4 id="11、触摸-amp-滑动-amp-抬起"><a href="#11、触摸-amp-滑动-amp-抬起" class="headerlink" title="11、触摸&amp;滑动&amp;抬起"></a>11、触摸&amp;滑动&amp;抬起</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d.touch.down(<span class="number">10</span>, <span class="number">10</span>) <span class="comment">#模拟按下</span></span><br><span class="line">time.sleep(<span class="number">.01</span>)  <span class="comment">#down和move之间有延迟，自己控制</span></span><br><span class="line">d.touch.move(<span class="number">15</span>,<span class="number">15</span>) <span class="comment">#模拟滑动</span></span><br><span class="line">d.touch.up()  <span class="comment">#模拟抬起</span></span><br></pre></td></tr></tbody></table></figure><h4 id="12、打开通知栏和快速设置"><a href="#12、打开通知栏和快速设置" class="headerlink" title="12、打开通知栏和快速设置"></a>12、打开通知栏和快速设置</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.open_notification() <span class="comment">#打开通知栏</span></span><br><span class="line">d.open_quick_settings() <span class="comment">#打开快速设置</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13、输入-amp-清空"><a href="#13、输入-amp-清空" class="headerlink" title="13、输入&amp;清空"></a>13、输入&amp;清空</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入</span></span><br><span class="line">send_keys(<span class="string">"#需要输入的内容"</span>)</span><br><span class="line"><span class="comment">#清空</span></span><br><span class="line">clear_text()</span><br></pre></td></tr></tbody></table></figure><h3 id="14、截图"><a href="#14、截图" class="headerlink" title="14、截图"></a>14、截图</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接截图保存在路径</span></span><br><span class="line">d.screenshot(<span class="string">"文件名.png"</span>)</span><br><span class="line"><span class="comment">#指定截图保存路劲</span></span><br><span class="line">d.screenshot(<span class="string">r'd:\xxx.png'</span>)  <span class="comment">#在D盘目录下创建一个xxx.png的截图</span></span><br></pre></td></tr></tbody></table></figure><h3 id="15、元素等待"><a href="#15、元素等待" class="headerlink" title="15、元素等待"></a>15、元素等待</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置元素查找等待时间（默认20s）</span></span><br><span class="line">d.implicitly_wait(<span class="number">10.0</span>)</span><br><span class="line">d(text = <span class="string">'Settings'</span>).click()  <span class="comment">#如果这个text元素在10秒钟没有显示，将会报错</span></span><br><span class="line"><span class="comment">#智能等待</span></span><br><span class="line">d.time_timeout = <span class="number">30</span>  <span class="comment">#设置全局等待时间为30秒（更改默认时间）</span></span><br><span class="line">d.app_start(<span class="string">"#包名"</span>,wait = <span class="literal">True</span>)   <span class="comment">#超时默认20秒</span></span><br><span class="line"><span class="comment">#等待某一个页面加载完成</span></span><br><span class="line">d.wait_activity()</span><br><span class="line"><span class="comment">#等待某一个元素出现</span></span><br><span class="line">d().wait()</span><br><span class="line"><span class="comment">#等待某一个与元素消失</span></span><br><span class="line">d().wait_gone()</span><br><span class="line"><span class="comment">#等待元素是否存在</span></span><br><span class="line">d().exists()</span><br><span class="line"><span class="comment">#等待点击，设置隐式等待</span></span><br><span class="line">click,clear_text()</span><br><span class="line">.click(timeout = <span class="number">50</span>) <span class="comment">#设置单独点击时间</span></span><br><span class="line">d().set_text(timeout = <span class="number">50</span>)  <span class="comment">#设置输入文本</span></span><br><span class="line"><span class="comment">#判断一个元素是否存在</span></span><br><span class="line">eg:</span><br><span class="line">    login_btn = d(resourecId = <span class="string">"#元素名"</span>)</span><br><span class="line">    <span class="keyword">if</span> login_btn.exists():</span><br><span class="line">        <span class="comment">#执行</span></span><br><span class="line">       login_btn.click</span><br></pre></td></tr></tbody></table></figure><h3 id="16、断言（预期结果是否等于实际结果的过程）"><a href="#16、断言（预期结果是否等于实际结果的过程）" class="headerlink" title="16、断言（预期结果是否等于实际结果的过程）"></a>16、断言（预期结果是否等于实际结果的过程）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> d.toast.get_massage() == <span class="string">"#某个字符串"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="17、pytest中mark标签使用"><a href="#17、pytest中mark标签使用" class="headerlink" title="17、pytest中mark标签使用"></a>17、pytest中mark标签使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在每个def用例上打上标签</span></span><br><span class="line">eg:</span><br><span class="line"><span class="meta">    @pytest.mark.</span><span class="comment">#标签名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_empty</span>():</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:        </span><br><span class="line">pytest.main([<span class="string">'-m #标签名'</span>])     </span><br></pre></td></tr></tbody></table></figure><h4 id="18、一个非常有用的代码"><a href="#18、一个非常有用的代码" class="headerlink" title="18、一个非常有用的代码"></a>18、一个非常有用的代码</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> d.watch_context() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.when(<span class="string">"立即（下载|更新）"</span>).when(<span class="string">"取消"</span>).click() <span class="comment">#当同是出现（立即安装或立即取消） 和取消 按钮的时候，点击取消</span></span><br><span class="line">    ctx.when(<span class="string">"同意"</span>).click()</span><br><span class="line">    ctx.when(<span class="string">"确定"</span>).click()</span><br><span class="line">    <span class="comment">#上面三行代码是立即执行的完的，不会有什么等待</span></span><br><span class="line">    ctx.wait_stable()  <span class="comment">#开启弹窗监控，并等待界面稳定（两个弹窗检查周期内没有弹窗代表稳定）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#使用call函数来触发函数回调</span></span><br><span class="line">    <span class="comment">#call支持两个参数，d和el，不区分参数位置，可以不传参，如果传参变量名不能写错</span></span><br><span class="line">    <span class="comment">#e.g：当有元素匹配仲夏之夜，点击返回按钮</span></span><br><span class="line">    ctx.when(<span class="string">'仲夏之夜'</span>).call(<span class="keyword">lambda</span> d: d.press(<span class="string">"back"</span>))</span><br><span class="line">    ctx.when(<span class="string">'确定'</span>).call(<span class="keyword">lambda</span> el: el.click())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#其他操作</span></span><br><span class="line"><span class="comment">#为了方便也可以使用代码中默认的弹窗监控逻辑</span></span><br><span class="line"><span class="comment">#下面是目前内置的默认逻辑</span></span><br><span class="line"><span class="keyword">with</span> d.watch_context(builtin = <span class="literal">True</span>) <span class="keyword">as</span> ctx:</span><br><span class="line">    <span class="comment">#在已有的基础上增加</span></span><br><span class="line">    ctx.when(<span class="string">'@tb:id/jview_view'</span>).when(<span class="string">'//*[@content-desc = '</span>图片<span class="string">']'</span>).click()</span><br><span class="line">    </span><br><span class="line">另一种写法</span><br><span class="line">ctx = d.watch_context()</span><br><span class="line">    ctx.when(<span class="string">'设置'</span>).click()</span><br><span class="line">    ctx.wait_stable() <span class="comment">#等待界面不再有弹窗了</span></span><br><span class="line">    ctx.close()</span><br><span class="line"></span><br><span class="line">注册监控</span><br><span class="line"><span class="comment">#常用写法，注册匿名监控</span></span><br><span class="line">d.watcher.when(<span class="string">'安装'</span>).click()</span><br><span class="line"><span class="comment">#注册名为ANR的监控，当出现ANR和Force Close时，点击Force Close</span></span><br><span class="line">d.watcher(<span class="string">'ANR'</span>).when(xpath=<span class="string">'ANR'</span>).when(<span class="string">'Force Close'</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他回调例子</span></span><br><span class="line">d.watch.when(<span class="string">'抢红包'</span>).press(<span class="string">'back'</span>)</span><br><span class="line">d.watch.when(<span class="string">"//*[text = 'Out of memory']"</span>).call(<span class="keyword">lambda</span> d: d.shell(<span class="string">'am force-stop com.im.qq'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#回调说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_callback</span>(<span class="params">d: u2.Device</span>):</span></span><br><span class="line">    d.xpath(<span class="string">"确定"</span>).click() <span class="comment">#在回调中调用不会再次出发watcher</span></span><br><span class="line">d.xpath(<span class="string">"继续"</span>).click()  <span class="comment">#使用d.xpath检查元素的时候，会出发watcher(目前最多出发5次)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控操作</span></span><br><span class="line"><span class="comment">#移除ANR的监控</span></span><br><span class="line">d.wathder.remove(<span class="string">"ANR"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除所有的监控</span></span><br><span class="line">d.watcher.remove()</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始后台监控</span></span><br><span class="line">d.watcher.start()</span><br><span class="line">d.watcher.start(<span class="number">2.0</span>)  <span class="comment">#默认监控间隔2.0秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#强制运行所有监控</span></span><br><span class="line">d.watcher.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止监控</span></span><br><span class="line">d.watcher.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止并移除所有的监控，常用于初始化</span></span><br><span class="line">d.watcher.reset()</span><br></pre></td></tr></tbody></table></figure><h4 id="18、输入法"><a href="#18、输入法" class="headerlink" title="18、输入法"></a>18、输入法</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d.set_fastinput_ime(<span class="literal">True</span>) <span class="comment">#切换成FastInputIME输入法</span></span><br><span class="line">d.send_keys(<span class="string">"你好123abcEFG"</span>) <span class="comment">#adb广播输入</span></span><br><span class="line">d.clear_text() <span class="comment">#清楚输入框所有内容</span></span><br><span class="line">d.set_fastinput_ime(<span class="literal">False</span>)  <span class="comment">#切换成正常的输入法</span></span><br><span class="line">d.send_action(<span class="string">'search'</span>) <span class="comment">#模拟输入法的搜索</span></span><br></pre></td></tr></tbody></table></figure><h4 id="19、Toast"><a href="#19、Toast" class="headerlink" title="19、Toast"></a>19、Toast</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Show Toast</span></span><br><span class="line">d.toast.show(<span class="string">'Hello world'</span>)</span><br><span class="line">d.toast.show(<span class="string">'Hello world'</span>,<span class="number">1.0</span>)   <span class="comment">#显示为1.0秒，默认为1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Get Toast</span></span><br><span class="line">d.toast.get_message(<span class="number">5.0</span>,<span class="number">10.0</span>,<span class="string">"defult message"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#clear cached toast</span></span><br><span class="line">d.toast.reset()</span><br></pre></td></tr></tbody></table></figure><h4 id="20、视频录制"><a href="#20、视频录制" class="headerlink" title="20、视频录制"></a>20、视频录制</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一步：安装依赖包</span><br><span class="line">pip3 install -U <span class="string">"uiautomator2[image]"</span></span><br><span class="line">第二步：使用方法</span><br><span class="line">d.screenrecord(<span class="string">'output.mp4'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">d.screenrecord.stop()  <span class="comment">#停止录制后，output.mp4 文件才能打开</span></span><br></pre></td></tr></tbody></table></figure><h4 id="21、图像适配"><a href="#21、图像适配" class="headerlink" title="21、图像适配"></a>21、图像适配</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一步：安装依赖包</span><br><span class="line">pip3 install -U <span class="string">"uiautomator2[image]"</span></span><br><span class="line">第二步：使用方法</span><br><span class="line">imdata = <span class="string">"target.png"</span></span><br><span class="line">d.image.match(imdata)</span><br><span class="line"><span class="comment">#匹配待查找的图片，立刻返回一个结果</span></span><br><span class="line"><span class="comment">#返回一个dice，eg:{"similarity":0.9,"point":[200,300]}</span></span><br><span class="line">d.image.click(imdata, timeout=<span class="number">20.0</span>)  <span class="comment">#在20s的时间内调用match轮询查找图片，执行点击操作</span></span><br></pre></td></tr></tbody></table></figure><h4 id="22、停止UIAutomator"><a href="#22、停止UIAutomator" class="headerlink" title="22、停止UIAutomator"></a>22、停止UIAutomator</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.service(<span class="string">"uiautomator"</span>).stop()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ytlmysql</title>
      <link href="/2021/07/25/ytlmysql/"/>
      <url>/2021/07/25/ytlmysql/</url>
      
        <content type="html"><![CDATA[<h2 id="ytlmysql"><a href="#ytlmysql" class="headerlink" title="ytlmysql"></a>ytlmysql</h2><h3 id="一-连接MySQL服务-MySQL数据库-的指令-查询电脑ip命令-ipconfig"><a href="#一-连接MySQL服务-MySQL数据库-的指令-查询电脑ip命令-ipconfig" class="headerlink" title="一.连接MySQL服务(MySQL数据库)的指令,查询电脑ip命令(ipconfig)"></a>一.连接MySQL服务(MySQL数据库)的指令,查询电脑ip命令(ipconfig)</h3><p>mysql - h 主机IP -P 端口 -u 用户名 -p密码<br>提醒:<br>(1)-p密码不要有空格,<br>(2)-p后面没有输入密码,回车会要求输入密码<br>(3)如果没有写-h 主机ip,默认就是主机<br>(4)如果没有写-p 端口,默认就是3306<br>(5)在实际工作中,3306一般会修改<br>(6)登入之前确保MySQL服务是启动状态 net start mysql 启动服务 net stop mysql 停止服务</p><h3 id="二-查看数据"><a href="#二-查看数据" class="headerlink" title="二.查看数据:"></a>二.查看数据:</h3><p>show databases<br>use mysql<br>show tables;<br>select * from user;  # 查询user表</p><h3 id="三-创建数据库"><a href="#三-创建数据库" class="headerlink" title="三.创建数据库:"></a>三.创建数据库:</h3><p>create database db02;  # 创建db02数据库<br>use db02<br>create table users (id int, name varchar(255), address varchar(255));  # 创建表格<br>insert into users values(1,’tom’,’bj’);  # 插入数据<br>insert into users values(2,’jack’,’sh’);  # 插入数据<br>insert into users values(3,’shunping’,’gz’);  # 插入数据<br>select * from users;  # 查询users表格数据<br>指令创建表,格式如下:注意(字体变蓝说明是个关键字,我们应该加个反引号``这个引起来)</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `表名`(</span><br><span class="line">指定列名1 指定列类型(字段类型),</span><br><span class="line">id int,</span><br><span class="line">`password` VARCHAR(255),</span><br><span class="line">`birthday` DATE)</span><br><span class="line">CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line">character set:字符集,如不指定测为所在数据库字符集,].</span><br><span class="line">collate:校对规则,如不指定则为所在数据库校对规则.</span><br><span class="line">engine:存储引擎,涉及内容较多.</span><br><span class="line">id        整形(int)</span><br><span class="line">name      字符串(varchar(225))</span><br><span class="line">password  字符串(varchar(255))</span><br><span class="line">birthday  日期(date)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user02`(</span><br><span class="line">id INT,</span><br><span class="line">`name` VARCHAR(255),</span><br><span class="line">`password` VARCHAR(255),</span><br><span class="line">`birthday` DATE)</span><br><span class="line">CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br></pre></td></tr></tbody></table></figure><h3 id="四-备份恢复数据库或者表"><a href="#四-备份恢复数据库或者表" class="headerlink" title="四.备份恢复数据库或者表:"></a>四.备份恢复数据库或者表:</h3><p>(1)备份数据库(注意:在DOS执行,后面不带分号)<br>mysqldump -u 用户名 -p -B 数据库1 数据库2 数据库n &gt; d:\path文件名.sql<br>(2)备份库的表:(注意:备份表不要-B)<br>mysqldump -u 用户名 -p密码 数据库名 表名1 表名2 表名n &gt; d:\path文件名.sql<br>(3)恢复数据库(注意:进入mysql里面在执行,先创建新的数据库名,在在这个库名下面备份数据)<br>create database 新库名;<br>use 新库名;<br>Source d:\path文件名.sql</p><h3 id="五-删除数据库里面的表"><a href="#五-删除数据库里面的表" class="headerlink" title="五.删除数据库里面的表:"></a>五.删除数据库里面的表:</h3><p>drop table 表名:</p><h3 id="六-删除数据库-注意-进入mysql在执行-慎重使用"><a href="#六-删除数据库-注意-进入mysql在执行-慎重使用" class="headerlink" title="六.删除数据库(注意:进入mysql在执行,慎重使用.)"></a>六.删除数据库(注意:进入mysql在执行,慎重使用.)</h3><p>drop database 库名;</p><h3 id="七-数据库的增删改查"><a href="#七-数据库的增删改查" class="headerlink" title="七.数据库的增删改查"></a>七.数据库的增删改查</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>1、向所有列插入数据–into关键字可以省略<br>insert    into    表名  values（列值1，列值2，……）<br>insert    into  studentinfo  values（‘004’，‘张鑫’，19，‘北京海淀’）<br>2、向指定列插入数据–into关键字可以省略<br>，不提供值的列一定是可以为空的列（null），<br>列名的顺序可以与表结构中的顺序不同，只要列值的顺序与之对应就行<br>insert    studentinfo（姓名，学号）  values（‘王强’，‘006’）<br>insert  into  表名（列名1，列名2，……） values（列值1，列值2，……）<br>insert    into  studentinfo（学号，姓名）  values（‘005’，‘李清’<br>identity–相同：对于标识列，因为是自动增长的，所以不能指定值<br>default–系统设定值：具有缺省值的列，可以使用default关键字来替代插入的数据</p><h4 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h4><p>删除表中数据–from关键字可以省略，如果不指定where条件，将把表中所有记录都删除掉（很危险！），<br>如果使用where指定条件，则满足条件的记录被删除<br>不能只删除半行或某几列数据<br>delete-删除   from   Tab1<br>delete   book  where  bid=’s0000’<br>truncate-删除所有   table 表名–不能指定条件，只能删除所有数据，所以功能等价于“delate  表名”的语句<br>优点：速度更快，使用的系统资源和事务日志资源更少<br>缺点：不会将删除每一条记录的操作记录到日志中，所以一旦删除，则无法通过日志恢复删除的数据<br>drop-删除    database-数据库 表名–删除数据库名<br>drop table-表 表名–删除表结构</p><h4 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h4><p>update–更新 表名 set–日落 列名1=该列新值，列名2=该列新值，……where 条件<br>update 表名 set salary=salary+100–表述每行工资都加100<br>update book set pub=’新华出版社’   where    Bname=’娱乐天地‘–更新指定的记录<br>update book set author2=’江泽民’,numinput=100,numstore=100 where author1=’邓小平’–同时更新多个字段</p><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>select * from 表名–查询所有记录<br>select 列名1，列名2，…… from 表名–查询指定的列，列的顺序可以与表结构的顺序不同，列之间使用逗号分隔<br>select Cid, address, Cname, Phone  from  customer</p><p>select 列名1 as 列别名1，列名2 as 列别名2，…… from 表名–重新为列指定列名，as关键字可以省略<br>select Bname as 书名,Author1 as 作者,Pub as 出版社 from book</p><p>select cid 学号,cname 姓名, address ,phone as 电话 from customer</p><p>select 列别名1=列名1，列别名2=列名2 ，…… from 表名–使用等于号重新为列指定列名<br>select 书名=bname,书号=bid,pub from book</p><p>select 列名1 +列名1 as 列别名，…… from 表名–可以把多列合并成一列显示</p><p>select 列别名=列名1 +列名1 ,…… from 表名<br>select 列名1 ，列名2 ，常量值 as 列名 from 表名–使用常量<br>select * from 表名 order by age asc–升序，salary desc–降序<br>select * from 表名 where address like ‘深圳%’</p><p>在mysql数据库中要查询前10条数据，不再使用top n语句，top n语句主要用在sqlserver数据库系统中，<br>在mysql中一般使用 select * from 表名 limit 0,10 order by 字段 desc,<br>如在学生表中查询年龄比较大的前10个学生，则这样写，<br>select * from 学生表 limit 0,10 order by 年龄 desc。（一般使用这个 在后面加 limit 0,10）<br>select top 5 * from customer （这个在sqlserver数据库中使用，在cmd使用无效）<br>select * from table_name limit 0,10 (0代表从第几行开始，10代表显示多少行)</p><p>select * from book where numstore between 20 and 30<br>select * from book where id in （’a0001’,’a0002’）<br>合函数方便进行数据统计<br>聚合函数不能在 where 中使用<br>常用聚合函数<br>count(): 查询总记录数 ：查询学生总数 select count(*) from students;<br>max(): 查询最大值 ：查询女生的最大年龄 select max(age) from students where sex=’女’;<br>min(): 查询最小值 ：查询1班的最小年龄 select min(age) from students;<br>sum(): 求和 ：查询北京学生的年龄总和 select sum(age) from students where hometown=’北京’;<br>avg(): 求平均值：查询女生的平均年龄 select avg(age) from students where sex=’女’ </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ytlmysql安装教程</title>
      <link href="/2021/07/24/ytlmysql-an-zhuang-jiao-cheng/"/>
      <url>/2021/07/24/ytlmysql-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="ytlmysql安装"><a href="#ytlmysql安装" class="headerlink" title="ytlmysql安装"></a>ytlmysql安装</h2><h3 id="一-下载MySQL"><a href="#一-下载MySQL" class="headerlink" title="一.下载MySQL"></a>一.下载MySQL</h3><p>1.点击<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">这里</a>下载mysql-5.7.19-winx64.zip压缩包<br>2.下载完之后解压到D:\ytlmysql\mysql-5.7.19-winx64目录下</p><h3 id="二-配置用户环境变量"><a href="#二-配置用户环境变量" class="headerlink" title="二.配置用户环境变量"></a>二.配置用户环境变量</h3><p>1.右击此电脑选择属性点击高级系统设置，点击高级最下面的环境变量<br>2.选择用户变量把路径配置到path：D:\ytlmysql\mysql-5.7.19-winx64\bin里面，之后点击确定关闭即可</p><h3 id="三-在本机配置MySQL"><a href="#三-在本机配置MySQL" class="headerlink" title="三.在本机配置MySQL"></a>三.在本机配置MySQL</h3><p>1.新建My.ini文件放到D:\ytlmysql\mysql-5.7.19-winx64\目录下<br>内容结构如下复制到My.ini文件里面就行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306  # 端口</span><br><span class="line">default-character-set=utf8  # 编码格式</span><br><span class="line">[mysqld]</span><br><span class="line"># 设置为自己的安装目录</span><br><span class="line">basedir=D:\ytlmysql\mysql-5.7.19-winx64\</span><br><span class="line"># 设置为MySQL的数据目录,这个目录是系统创建</span><br><span class="line">datadir=D:\ytlmysql\mysql-5.7.19-winx64\data\</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line"># 跳过安全检查</span><br><span class="line"># skip-grant-tables</span><br></pre></td></tr></tbody></table></figure><p>2.以管理员的身份打开cmd,并切换到 cd /d D:\ytlmysql\mysql-5.7.19-winx64\bin\ 目录下,执行如下命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></tbody></table></figure><p>如是新装的win10系统执行这个命令会报错，需另外安装<a href="https://github.com/YtlGitHub/YtlMySQL/blob/main/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85mysql%E5%87%BA%E9%94%99%E6%97%B6%E5%AE%89%E8%A3%85%E5%90%8E%E7%BD%AE%E5%B8%A6dll/vcredist_x64.exe">vcredist_x64.exe</a>插件，在执行这个命令就成功了<br>3.初始化数据库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></tbody></table></figure><p>4.启动数据库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></tbody></table></figure><p>5.停止数据库,这个先不关最后不用了在关</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></tbody></table></figure><h3 id="四-修改root密码"><a href="#四-修改root密码" class="headerlink" title="四.修改root密码"></a>四.修改root密码</h3><p>1.进入mysql管理终端:mysql -u root -p (当前root用户密码为空),不需要输入密码直接回车就可以进入mysql</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><p>2.修改root密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set authentication_string=password("ytl")where user="root" and Host="localhost";</span><br><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><p>上面语句就行修改root用户的密码为ytl<br>注意在后面需要带’;’分号,回车执行指令<br>在执行flush privileges;刷新权限<br>最后退出quit,注意这里只是退出终端,但是MySQL服务是还在运行的.<br>3.回到D:\ytlmysql\mysql-5.7.19-winx64\目录下打开my.ini文件注销里面的# skip-grant-tables,注意修改完之后记得要重新启动才能生效.<br>4.注销后再执行net stop mysql停止MySQL,在执行net start mysql启动MySQL服务<br>5.安装完成</p><h3 id="五-进入本地mysql"><a href="#五-进入本地mysql" class="headerlink" title="五.进入本地mysql"></a>五.进入本地mysql</h3><p>现在重新进入MySQL,输入正确的用户和密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><h3 id="六-修改权限让其他用户也可以连接你的mysql"><a href="#六-修改权限让其他用户也可以连接你的mysql" class="headerlink" title="六.修改权限让其他用户也可以连接你的mysql"></a>六.修改权限让其他用户也可以连接你的mysql</h3><h4 id="1-改表法"><a href="#1-改表法" class="headerlink" title="1.改表法"></a>1.改表法</h4><p>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">select host, user from user;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-授权法"><a href="#2-授权法" class="headerlink" title="2.授权法"></a>2.授权法</h4><p>(1)例如，你想用户’ytluser’使用密码’ytl’从任何主机连接到mysql服务器的话。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'ytluser'@'%' IDENTIFIED BY 'ytl' WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure><p>(2)如果你想允许用户ytluser从ip为10.127.56.177的主机连接到mysql服务器，并使用ytl作为密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'ytluser'@'10.127.56.177' IDENTIFIED BY 'ytl' WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure><p>(3)如果你想允许用户ytluser从ip为192.168.1.6的主机连接到mysql服务器的db(库名)数据库，并使用ytl作为密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON db.* TO 'ytluser'@'192.168.1.3' IDENTIFIED BY 'ytl' WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署个人博客</title>
      <link href="/2021/07/22/blog/"/>
      <url>/2021/07/22/blog/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到部署个人博客<a href="https://ytlgithub.github.io/">ytlBlog</a>!</p><h2 id="部署个人博客"><a href="#部署个人博客" class="headerlink" title="部署个人博客"></a>部署个人博客</h2><h3 id="一-安装环境"><a href="#一-安装环境" class="headerlink" title="一.安装环境"></a>一.安装环境</h3><p>1.安装<a href="https://git-scm.com/">Git</a><br>2.安装<a href="https://nodejs.org/en/">node.js</a><br>3.当然你要有一个<a href="https://github.com/">github</a>账号，没有的话赶快去注册一个吧</p><h3 id="二-配置Github"><a href="#二-配置Github" class="headerlink" title="二.配置Github"></a>二.配置Github</h3><p>1.建立Repository,建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】<br>2.配置SSH-Key<br>3.创建密钥方法<br>创建密钥：在你的博客目录下右键弹框点击Git Bash Here 打开Git命令仓库输入如下命令<br>创建密钥命令：ssh-keygen -t rsa -C “<a href="mailto:1766842398@qq.com">1766842398@qq.com</a>“  注释：这里的邮箱输入你自己的<br>查看创建的密钥命令：cat ~/.ssh/id_rsa.pub  注释：复制这些密钥到GitHub ssh里面 头像点击设置里面添加ssh<br>会产生两个密钥一个id_esa 是私钥一个id_rsa.pub 是公钥</p><h3 id="三-安装Hexo"><a href="#三-安装Hexo" class="headerlink" title="三.安装Hexo"></a>三.安装Hexo</h3><p>1.打开Git命令行，执行如下命令<br>$ npm install -g hexo</p><h3 id="四-开始部署前提条件"><a href="#四-开始部署前提条件" class="headerlink" title="四.开始部署前提条件"></a>四.开始部署前提条件</h3><p>1.在电脑中建立一个名字叫「Hexo」的文件夹（比如我建在了D:\Hexo），然后在此文件夹中右键打开Git Bash。执行下面的命令<br>$ hexo init<br>Hexo随后会自动在目标文件夹建立网站所需要的文件<br>2.然后（在 /D/Hexo下）执行npm install<br>$ npm install<br>会在D:\Hexo目录中安装 node_modules</p><h3 id="五-生成博客"><a href="#五-生成博客" class="headerlink" title="五.生成博客"></a>五.生成博客</h3><p>1.启动在浏览器访问<a href="http://localhost:4000/">http://localhost:4000/</a> # 这时可以看到Hexo已为你生成了一篇blog<br>$ hexo server<br>可以简化<br>$ hexo s  生成本地浏览静态码<br>按Ctrl+C 停止Server<br>2.新建一个文章<br>$ hexo new “文章名”<br>刷新本地网页<a href="http://localhost:4000/">http://localhost:4000/</a> 可以发现已生成了一篇新文章 “文章名”<br>3.删除生成的public<br>$ hexo clean<br>4.生成静态网页<br>$ hexo generate<br>可以简化<br>$ hexo g<br>该命令执行完后，会在 D:\Hexo\public\ 目录下生成一系列html、css等文件<br>5.编辑文章<br>hexo new “文章名”会在D:\Hexo\source_posts目录下生成一个markdown文件：My-New-Post.md<br>可以使用一个支持markdown语法的编辑器（比如 Sublime Text 2）来编辑该文件。</p><h3 id="六-部署到Github"><a href="#六-部署到Github" class="headerlink" title="六.部署到Github"></a>六.部署到Github</h3><p>1.安装hexo-deployer-git插件，在站点目录下输入下面命令安装插件就好了，后在使用Hexo d命令就可以推送了<br>$ npm hexo-deployer-git<br>2.部署到Github前需要配置_config.yml文件，首先找到下面的内容<br>deploy:<br>    type:<br>然后将它们修改为<br>deploy:<br>    type: git<br>    repository: <a href="mailto:git@github.com">git@github.com</a>:YtlGitHub/YtlGitHub.github.io.git  注释：这个是输入你自己的SSH密钥地址<br>    branch: main  注释：main是你自己的分支<br>3.把代码文件推送到Github上<br>$ hexo deploy<br>4.测试<br>当部署完成后，在浏览器中打开<a href="https://ytlgithuborganization.github.io/YtlGitHub.github.io/">https://YtlGitHuborganization.github.io/YtlGitHub.github.io/</a> ，正常显示网页，表明部署成功。<br>本地静态网页：<a href="http://localhost:4000/">http://localhost:4000</a></p><h3 id="七-生成漂亮的主题"><a href="#七-生成漂亮的主题" class="headerlink" title="七.生成漂亮的主题"></a>七.生成漂亮的主题</h3><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><p>前言：我们知道它自己默认主题是非常难看的，所以我们就要下载一个漂亮的主题，网上有很多主题可以下载，这里我以<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>主题作为演示<br>(1).点击<a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a>下载最新稳定版代码的master分支。解压后，将hexo-theme-matery文件夹复制到你themes的Hexo博客项目文件夹中，并重命名为matery，名字自己可以随便定义与下面配置主题名字一致就行。<br>(2).当然，您可以使用git clone下载到您的themes文件夹中。<br>git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git">https://github.com/blinkfox/hexo-theme-matery.git</a></p><h4 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2.配置主题"></a>2.配置主题</h4><p>(1).修改你博客路径下_config.yml文件里面theme: 的值，后面的值修改为matery，注意matery就是上面主题自定义的名字</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">matery</span></span><br></pre></td></tr></tbody></table></figure><p>(2).修改主题显示自己的信息_config.yml博客路径里面的_config.yml，如果您是中国用户，建议将language的值改为zh-CN。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">YtlBlog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'欢迎来到Ytl的博客'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'网站描述'</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">'您网站的关键字,支持多个值'</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Ytl</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><p>(3).其他修改建议_config.yml博客路径里面的_config.yml<br>请修改的价值url的_config.yml，以你的网站的主URL(例如<a href="http://xxx.github.io/">http://xxx.github.io</a>)<br>我们建议修改这两个值per_page是的倍数6，如：12，18等等，以便可在每个屏幕下显示良好的职位列表。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p>(4).其他配置请参考<a href="https://github.com/YtlGitHub/ytlblog/tree/main/themes/matery">这里</a><br>你下载的主题下面的README_CN.md有详细介绍<br>hexo\themes\matery\README_CN.md</p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81MzYzNy8zMDExMA==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><noscript> 为正常使用来必力评论功能请激活JavaScript</noscript></div><!-- City版安装代码已完成 -->]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/19/hello-world/"/>
      <url>/2021/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
